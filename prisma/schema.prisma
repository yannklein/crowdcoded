
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Impact {
  ORGANIC
  SUSTAINABLE
  EDUCATES
  SOCIAL
  CLIMATE
  EQUAL
}

enum Status {
  ON_GOING
  ACHIEVED
  CLOSED
}

enum Lang {
  EN
  JA
}

model Project {
  id                    String      @default(cuid()) @id
  createdAt             DateTime    @default(now()) @map(name: "created_at")
  updatedAt             DateTime    @updatedAt @map(name: "updated_at")
  status                Status
  goal                  Int
  impacts               Impact[]
  ownersPicture         String?
  projectPicture        String?
  gmapsUrl              String?
  links                 Json?
  donations             Donation[]
  projectTranslations   ProjectTranslation[]
  @@map(name: "projects")
}

model ProjectTranslation {
  id            String      @default(cuid()) @id
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  title         String
  description   String      @db.Text
  owners        String
  lang          Lang
  meetStory     Json
  mission       String      @db.Text
  work          String      @db.Text
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String
  milestones             Milestone[]
  @@map(name: "project_translations")
}

model Milestone {
  id            String      @default(cuid()) @id
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  stepNb        Int
  date          DateTime?   @db.Date
  title         String
  description   String      @db.Text
  completed     Boolean
  projectTranslation       ProjectTranslation   @relation(fields: [projectTranslationId], references: [id])
  projectTranslationId     String
  @@map(name: "milestones")
}

model Donation {
  id            String      @default(cuid()) @id
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  name          String?
  email         String      
  amount        Int
  showDonator   Boolean   @default(true)
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String
  @@map(name: "donations")
}